# Road to Final

## Map scale notes
At furthest zoom level, only capitals and mega cities (NY, Caracas, Mumbai, Stockholm, London, Berlin, Moscow, Lagos, Cape Town, Cairo, Tehran, Karachi)
At roughly Brazil size, large cities (Salvador, Rio, Palmas, Campo Grande, La Paz, Trujillo, Cordoba, Harare, Pretoria, Kansas City)
At roughly Colorado size, towns (Littleton, Soria, Guildford, Alingsås, Budaun)
At roughly Java size, villages (Magelang, Karangasem, Skara)

[1] = 1.0
[2] = 5.0
[5] = 25.0
[6] = 30.0

1 = 1
5 = 2
25 = 5
30 = 6

Very rough approx: Tr = 0.01z^2 + 0.3z

+ Levels get different border widths




Do the same vec2+scale trick I used for the outlines, for the POIs, to get consistent scales

Finally:
- per zoom frame, find any poi plane that moved across the rank threshold and touch its toggleTime


PROBLEM:
- how do I pack POIs into progressively deeper regions? Does a province contain its megacapital?
++ no problem, POIs are distributed into regions and promoted up into the countries

POI Scaling:
- Admin level <= 2 -> .Capital

### STEPS
+ rebake map data
- use rank to scale poi markers
- give indexedPrimitive an extra attrib buffer (scalar float)
-- fill that extra attrib from buildPlaceMarkers
- use zoom to reject pois
-- put rankZoom into Z coordinate
-- send stepZoom level as uniform to entire shader
-- #1 Reject if too distant
-- if sZ<rZ, reject
-- #2 Smoothfade on approach
-- if sZ>rZ-w, render with alpha = lerp through (sZ in rZ-w, rZ)
- polish crossfades from the poirenderer
-- stepZoom is zoom, smooth-snapped to specific rank levels



## Tile streaming
- move POI distribution job to runtime side
- load continent + country POI planes
- start client
- load region POI planes, distribute, re-render
- quantize world grid into 5ºx5º boxes
- if close to village-level, load POI box files for visible grids
- put into LRU cache
- evict tiles at memory pressure warning
- make sure model handles eviction of rendered tile

## Outline rendering
- teach RenderPrimitive to work with different vertex formats
- try to break apart RenderPrimitive into Indexed, Arrayed and Tristrip versions
- try to create an outline primitive with Tristrip and fat vertex format

## POI rendering
- progressive POI plane rendering
-- each POI plane has a feature level
-- aggressive box culling
--- culled with its GeoRegion
-- each POI plane renders its alpha at relation to global zoom
--- country POI plane ramps in over 1.5x-1.6x; region POI plane ramps in over 3x-4x
--- this info and conf should sit in the POI renderer
-- POIs scale, but very slowly (~0.1x)

## Labels
- composite UIView over GLKView
-- transparent UIView (visual and touch)
-- render groups of labels based on
- alpha based on distance to label

## Dataset economy
- Swift bitfields?
- Fixed-point floats

## Persistence

## UI
- visited viewstate
- close regions
- interaction markers

## User journey
### Insights
- need a selection state separate from opening
-- which means "visited" and "opened" are two different states
- cities are used to navigate, especially at detailed levels
-- which means cities must be visible on any closed region

### First boot
U launches tapmap and is met by an overview of the world.
There is only land and sea. U taps the landmass. The borders around
the continents highlight, and the name "Earth" is displayed.
Also, a small circle appears, an inviting tap-to-select.
Tapping there, U marks Earth as visited.
?? How does the difference between selection and opening look?
U long-presses the landmass, and the cracks quickly spread out around U's finger.

When the cracks have spread to the edges of the landmass, it fractures
and reveals the continents underneath. The capitals of the world are marked
by little stars.

U has been to Europe, and taps it to mark it as visited.
U then long-presses Europe.
Europe splits apart to reveal the countries underneath.
The countries are labeled and tinted in their national
colours so they can be easily found.

At this point, U expects to be able to mark countries U has visited.
However, every opened country splits apart into their constituent regions.

The world fractures into a beautiful jagged mess of regions and
provinces, with names few have noticed. Gone is the "went to Germany",
and instead U went to Bavaria, Thüringen and Brandenburg.

### Covering U's travel history
U now starts going over past journeys. U keeps going through
Europe, drilling into countries. U leaves some of them marked
as visited but will come back later to sort out the provinces.

U makes a simple mistake by tapping Switzerland instead of Austria.
By tapping again, Switzerland is no longer marked as visited.
Had U also opened Switzerland, a simple pinch would have closed
Switzerland again, and closed all its cantons too.

Soon U reaches the less familiar region level. U is not sure whether the
visit to Bangkok means Samut Prakan or Samut Sakhon. By zooming in a bit,
cities are named by labels. U finds the Bangkok Metropolis area, and presses
the circle to mark it as visited.

### Making something from the data
U has marked and opened the parts of the world U has visited.
There is a button on the map, that flips it around to the backside.
On the backside is a wealth of presentation modes


