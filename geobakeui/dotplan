# Geobaking
- ingest both country and region files
-+ select two files
-+ run two parse jobs
-+ parse into two GeoFeatureCollections
-- run two tessellation jobs
-- at this point we have two collections of GeoRegions
-+ run the hierarchy fixup job
- figure out a way to not nestle jobs so goddamn deep
-- run the load jobs synchronously inside an async job that finishes up with the fixup op
- build up full continent->region hierarchy
-- put everything in Universe for now
- fixup parent links
-- countries linkup to continents
-+ provinces linkup to countries
- calculate continents
-- add a third tessellation job
-- make sure all barycenters lie inside the parent

# Data
- make sure all regions have at least one polygon


# Correctness
- make all geography types conform to Equatable
+ make GeoFeatureCollection hold sets of features...
+ ...so it is easy to knock out collected features




// FIXME: very drawcall-heavy. Can be done in one drawcall with fatter vertices.
// Possible to draw each region with barycenter and national colors in vertex buffer.
// Can run vertex transforms from that barycenter and a progression in uniforms

// Rendering overview:

The GeoRegion is the rendering primitive from the app's viewpoint. When packing, GeoMultiFeatures list GeoFeatures. The tesselation job ingests an array of GeoMultiFeatures, and produces an array of GeoRegions, which get put into the archive. A single GeoRegion contains a border outline and a complete tessellation and can render all its features (exterior and interior rings considered). GeoMultiFeatures are a part of the baking tool, not the actual runtime.

At runtime, a mix of continents, countries and regions are all rendered as a flat array of GeoRegion tessellations. These tessellations are concatenated into one drawcall with fat vertices for color separation. Additionally, each GeoRegion provides its primary outline (the set of all exterior rings as line segments). By replacing "opened" continents, countries and regions with GeoRegions, all active parts can be written into a separate picking buffer and used for pixel-perfect tapping.

1. Fix the parser: the parser should generate GeoMultiFeatures instead of GeoRegions. Pull coordinates into the GMFs. Names are set on the GMFs.
2. Fix the tessellator job: ([GeoMultiFeature] -> [GeoRegion]). Throw away the vertex arrays; keep the tessellation. Copy over the names outside the tessellator job.



Regions outlines are single drawcalls, ~250 of them. Possible to pack all border
vertices into one buffer and run _LINES instead of _LINE_LOOP. That would roughly
double the index count, but save almost a frame's worth of draw call.

Region fills could also be crushed into 1+1 drawcalls (separate handling of interacted
region.

That would get us down from ~500 drawcalls to ~5. At that point, it might actually be
viable to run with the full 250ktri dataset, or at least close to it. It leaves plenty
of space for POI markers and better shading, especially with aabb culling.


